<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="4.0" jmeter="4.0 r1823414">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="ILS Load test" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">60</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="jp@gc - Chrome Driver Config" enabled="true">
          <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>
          <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
          <stringProp name="WebDriverConfig.http_host"></stringProp>
          <intProp name="WebDriverConfig.http_port">8080</intProp>
          <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
          <stringProp name="WebDriverConfig.https_host"></stringProp>
          <intProp name="WebDriverConfig.https_port">8080</intProp>
          <stringProp name="WebDriverConfig.ftp_host"></stringProp>
          <intProp name="WebDriverConfig.ftp_port">8080</intProp>
          <stringProp name="WebDriverConfig.socks_host"></stringProp>
          <intProp name="WebDriverConfig.socks_port">8080</intProp>
          <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
          <boolProp name="WebDriverConfig.maximize_browser">true</boolProp>
          <boolProp name="WebDriverConfig.useAutomationExtension">false</boolProp>
          <boolProp name="WebDriverConfig.reset_per_iteration">false</boolProp>
          <boolProp name="WebDriverConfig.dev_mode">false</boolProp>
          <stringProp name="ChromeDriverConfig.chromedriver_path">/usr/local/bin/chromedriver</stringProp>
          <boolProp name="ChromeDriverConfig.android_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.headless_enabled">true</boolProp>
        </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="1_Login" enabled="true">
          <stringProp name="WebDriverSampler.script">WDS.sampleResult.sampleStart()

var pkg = JavaImporter(org.openqa.selenium, org.openqa.selenium.support.ui)
var wait = new pkg.WebDriverWait(WDS.browser, 120)

WDS.browser.get(&apos;https://staging.niems.nzta.govt.nz/&apos;)
wait.until(pkg.ExpectedConditions.presenceOfElementLocated(org.openqa.selenium.By.id(&quot;okta-signin-username&quot;)))
WDS.browser.findElement(org.openqa.selenium.By.id(&quot;okta-signin-username&quot;)).sendKeys(&quot;josh.lloyd@nzta.govt.nz&quot;)
WDS.browser.findElement(org.openqa.selenium.By.id(&quot;okta-signin-password&quot;)).sendKeys(&quot;Transport123&quot;)
WDS.browser.findElement(org.openqa.selenium.By.id(&quot;okta-signin-submit&quot;)).click()

wait.until(pkg.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&quot;//ul[@class=&apos;nav nav-tabs&apos;]/li[5]/a&quot;)))

WDS.sampleResult.sampleEnd()</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="LOOP" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">2</stringProp>
        </LoopController>
        <hashTree>
          <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable" enabled="true">
            <stringProp name="variableName">description_id</stringProp>
            <stringProp name="outputFormat"></stringProp>
            <stringProp name="minimumValue">1</stringProp>
            <stringProp name="maximumValue">100000000000000</stringProp>
            <stringProp name="randomSeed"></stringProp>
            <boolProp name="perThread">false</boolProp>
          </RandomVariableConfig>
          <hashTree/>
          <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="2_go to Reports page" enabled="true">
            <stringProp name="WebDriverSampler.script">WDS.sampleResult.sampleStart()

var pkg = JavaImporter(org.openqa.selenium, org.openqa.selenium.support.ui)
var wait = new pkg.WebDriverWait(WDS.browser, 60)
var uuid = ${description_id};

wait.until(pkg.ExpectedConditions.elementToBeClickable(pkg.By.xpath(&quot;//a[@href=&apos;#runReports&apos;]&quot;)))
WDS.browser.findElement(pkg.By.xpath(&quot;//a[@href=&apos;#runReports&apos;]&quot;)).click()
wait.until(pkg.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&quot;//th[@colspan=&apos;1&apos;][contains(text(),&apos;Event Type&apos;)]&quot;)))

WDS.sampleResult.sampleEnd()
</stringProp>
            <stringProp name="WebDriverSampler.parameters"></stringProp>
            <stringProp name="WebDriverSampler.language">javascript</stringProp>
          </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
          <hashTree/>
          <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="3_create Incident" enabled="true">
            <stringProp name="WebDriverSampler.script">WDS.sampleResult.sampleStart()

var pkg = JavaImporter(org.openqa.selenium, org.openqa.selenium.support.ui)
var wait = new pkg.WebDriverWait(WDS.browser, 60)
var uuid = ${description_id};

wait.until(pkg.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&quot;//ul[@class=&apos;nav nav-tabs&apos;]/li[5]/a&quot;)))

wait.until(pkg.ExpectedConditions.elementToBeClickable(pkg.By.xpath(&quot;//ul[@class=&apos;nav nav-tabs&apos;]/li[5]/a&quot;)))
var btnView4 = WDS.browser.findElement(pkg.By.xpath(&quot;//ul[@class=&apos;nav nav-tabs&apos;]/li[5]/a&quot;))
WDS.browser.executeScript(&quot;arguments[0].click();&quot;, btnView4)

wait.until(pkg.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&quot;//textarea[@class=&apos;gwt-TextArea&apos;]&quot;)))
WDS.browser.findElement(pkg.By.xpath(&quot;//textarea[@class=&apos;gwt-TextArea&apos;]&quot;)).sendKeys(&quot;NEW ACCIDENT &quot; + uuid)

wait.until(pkg.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&quot;//td[@colspan=&apos;2&apos;]//td[2]//button&quot;)))
wait.until(pkg.ExpectedConditions.elementToBeClickable(pkg.By.xpath(&quot;//td[@colspan=&apos;2&apos;]//td[2]//button&quot;)))
var btnView3 = WDS.browser.findElement(pkg.By.xpath(&quot;//td[@colspan=&apos;2&apos;]//td[2]//button&quot;))
WDS.browser.executeScript(&quot;arguments[0].click();&quot;, btnView3)

wait.until(pkg.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&quot;//div[contains(text(),&apos;Start Time&apos;)]&quot;)))

WDS.sampleResult.sampleEnd()</stringProp>
            <stringProp name="WebDriverSampler.parameters"></stringProp>
            <stringProp name="WebDriverSampler.language">javascript</stringProp>
          </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
          <hashTree/>
          <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="4_search" enabled="true">
            <stringProp name="WebDriverSampler.script">WDS.sampleResult.sampleStart()

var pkg = JavaImporter(org.openqa.selenium, org.openqa.selenium.support.ui)
var wait = new pkg.WebDriverWait(WDS.browser, 60)
var uuid = ${description_id};


wait.until(pkg.ExpectedConditions.elementToBeClickable(pkg.By.xpath(&quot;//i[@class=&apos;icon-remove&apos;]/..&quot;)))
var btnView1 = WDS.browser.findElement(pkg.By.xpath(&quot;//i[@class=&apos;icon-remove&apos;]/..&quot;))
WDS.browser.executeScript(&quot;arguments[0].click();&quot;, btnView1)

wait.until(pkg.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&quot;//div[@class=&apos;input-append&apos;]//input[@class=&apos;gwt-TextBox&apos;]&quot;)))
WDS.browser.findElement(pkg.By.xpath(&quot;//div[@class=&apos;input-append&apos;]//input[@class=&apos;gwt-TextBox&apos;]&quot;)).sendKeys(&quot;NEW ACCIDENT &quot; + uuid)

WDS.sampleResult.sampleEnd()</stringProp>
            <stringProp name="WebDriverSampler.parameters"></stringProp>
            <stringProp name="WebDriverSampler.language">javascript</stringProp>
          </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
          <hashTree/>
          <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="4_set All Lanes Open" enabled="true">
            <stringProp name="WebDriverSampler.script">WDS.sampleResult.sampleStart()

var pkg = JavaImporter(org.openqa.selenium, org.openqa.selenium.support.ui)
var wait = new pkg.WebDriverWait(WDS.browser, 60)
var uuid = ${description_id};

wait.until(pkg.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&quot;//div[contains(text(),&apos;NEW ACCIDENT &quot; + uuid + &quot;&apos;)]/../..//td[13]//button&quot;)))
wait.until(pkg.ExpectedConditions.elementToBeClickable(pkg.By.xpath(&quot;//div[contains(text(),&apos;NEW ACCIDENT &quot; + uuid + &quot;&apos;)]/../..//td[13]//button&quot;)))
var btnView1 = WDS.browser.findElement(pkg.By.xpath(&quot;//div[contains(text(),&apos;NEW ACCIDENT &quot; + uuid + &quot;&apos;)]/../..//td[13]//button&quot;))
try {
     WDS.browser.executeScript(&quot;arguments[0].click();&quot;, btnView1)
} catch (ex) {
	WDS.browser.executeScript(&quot;arguments[0].click();&quot;, btnView1)
}
wait.until(pkg.ExpectedConditions.invisibilityOfElementLocated(pkg.By.xpath(&quot;//div[contains(text(),&apos;NEW ACCIDENT &quot; + uuid + &quot;&apos;)]/../..//td[13]//button&quot;)))

WDS.sampleResult.sampleEnd()
</stringProp>
            <stringProp name="WebDriverSampler.parameters"></stringProp>
            <stringProp name="WebDriverSampler.language">javascript</stringProp>
          </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
          <hashTree/>
          <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="5_set Traffic Normal" enabled="true">
            <stringProp name="WebDriverSampler.script">WDS.sampleResult.sampleStart()

var pkg = JavaImporter(org.openqa.selenium, org.openqa.selenium.support.ui)
var wait = new pkg.WebDriverWait(WDS.browser, 60)
var uuid = ${description_id};

wait.until(pkg.ExpectedConditions.elementToBeClickable(pkg.By.xpath(&quot;//div[contains(text(),&apos;NEW ACCIDENT &quot; + uuid + &quot;&apos;)]/../..//td[14]//button&quot;)))
var btnView2 = WDS.browser.findElement(pkg.By.xpath(&quot;//div[contains(text(),&apos;NEW ACCIDENT &quot; + uuid + &quot;&apos;)]/../..//td[14]//button&quot;))
try {
	WDS.browser.executeScript(&quot;arguments[0].click();&quot;, btnView2)
} catch (ex) {
	WDS.browser.executeScript(&quot;arguments[0].click();&quot;, btnView2)
}
wait.until(pkg.ExpectedConditions.invisibilityOfElementLocated(pkg.By.xpath(&quot;//div[contains(text(),&apos;NEW ACCIDENT &quot; + uuid + &quot;&apos;)]/../..//td[14]//button&quot;)))

WDS.sampleResult.sampleEnd()
</stringProp>
            <stringProp name="WebDriverSampler.parameters"></stringProp>
            <stringProp name="WebDriverSampler.language">javascript</stringProp>
          </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
          <hashTree/>
        </hashTree>
        <BackendListener guiclass="BackendListenerGui" testclass="BackendListener" testname="Backend Listener" enabled="true">
          <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="influxdbMetricsSender" elementType="Argument">
                <stringProp name="Argument.name">influxdbMetricsSender</stringProp>
                <stringProp name="Argument.value">org.apache.jmeter.visualizers.backend.influxdb.HttpMetricsSender</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="influxdbUrl" elementType="Argument">
                <stringProp name="Argument.name">influxdbUrl</stringProp>
                <stringProp name="Argument.value">http://jmeter-influxdb:8086/write?db=jmeter</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="application" elementType="Argument">
                <stringProp name="Argument.name">application</stringProp>
                <stringProp name="Argument.value">ils</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="measurement" elementType="Argument">
                <stringProp name="Argument.name">measurement</stringProp>
                <stringProp name="Argument.value">jmeter</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="summaryOnly" elementType="Argument">
                <stringProp name="Argument.name">summaryOnly</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="samplersRegex" elementType="Argument">
                <stringProp name="Argument.name">samplersRegex</stringProp>
                <stringProp name="Argument.value">.*</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="percentiles" elementType="Argument">
                <stringProp name="Argument.name">percentiles</stringProp>
                <stringProp name="Argument.value">90;95;99</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="testTitle" elementType="Argument">
                <stringProp name="Argument.name">testTitle</stringProp>
                <stringProp name="Argument.value">Test name</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="eventTags" elementType="Argument">
                <stringProp name="Argument.name">eventTags</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="classname">org.apache.jmeter.visualizers.backend.influxdb.InfluxdbBackendListenerClient</stringProp>
        </BackendListener>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
